Creating a new rails app
1. Make app
    a. scripts: script: rails new myapp --database=postgresql
2. Create a home Controller and home view
    a. script: rails generate controller home index
    b. The home controller is in app/controllers/home_controller.rb
    c. The home view is in app/views/home/index.html.erb
3. Make the new home controller and home view the default view for your app
    a. go to the config folder and open the routes.rb file
    b. underneath the get 'home/index' in the Rails.application.routes.draw method type this script:
        i. root :to => 'home#index'
4. run rails server
    a. script: rails server
        i. can be: rails s

Creating Controllers and Views
1. Create controllers and Views
    a. script: rails generate controller [controller name]
    b. example: rails generate contoller posts 
    c. controller names must be plural
2. You can find the controller in app/controllers
3. The controller is a ruby class that you can put methods in it to send information to 
the frontend and query the database
4. Add an index method to the controller
5. Create an index.html.erb file in the app/views/[controller name]
6. In the config/routes.rb add a resource in the get "home/index" route
    a. example: 
        get "home/index"
            resources :post
    b. Post is the name of the controller
7. You can use rake routes to see all the routes that come with a controller
    a. script: rake routes
8. Create a bunch of methods that correspond to the controller action name
inside the controller class
9. For the controller actions that have views, you can create html.erb files for them
    a. Example: edit.html.erb
    b. Place these html.erb files in the correct views folder
10. To get the html.erb files to grab information from the controller
    a. Example in html.erb:
        <h1>Title</h1>
        <p><=%@variableName %></p>
    b. In the controller method create instance variables
        i. Example:
            Class PostsController < ApplicationController
                def index
                    @variableName = 'Hello World!'
                end
            end

Creating and connecting a database and database models
1. Gem install postgresql into your project
    a. script: gem install pg
2. Check the gem file to make sure you have postgresql in it
3. Check the config/database.yml to see that postgresql is installed and check the names of the databases
4. create databases for development, test, and production
    a. script: createdb myapp_development, createdb myapp_test, createdb myapp_production
5. Create your models
    a. script: rails g model [name of model] [name of column]:[datatype]
    b. example: rails g model category name:string
    c. model names must be singular
    d. can be g or generate
6. Migrate models to database
    a. script: rake db:migrate
    b. This updates the databases with the new models
7. Migrating models to heroku
    a. git add, commit, and push to heroku first
    b. script: heroku run rake db:migrate
8. You need a resource for models and controllers even if the there is no
direct controller related to a model

Creating Associations
1. Checkout https://guides.rubyonrails.org/association_basics.html for examples and types
2. Go to app/models
3. Inside the models folder you will see the models you have made
4. Place the relationships inside the model classes
5. Also, make sure you make the fields in each model accessbile in the model classes
if they are meant to be accessbile
    a. example:
        def permitted_params
            params.require(:post).permit(:title, :body, :category_id, :author_id)
        end
    b. relationship example - see the app/model folder

Entering the ruby console on the terminal and messing with the database in the ruby console
1. script: rails console
2. Insert new instance in the database model in the rails console
    a. example: category = Category.new(:name => "News")
    b. example: post = Post.create(:title => "Our First Post", :body => "This is some sample text", :category_id => 1)
3. Retrieve all of the instances in the database
    a. example: category = Category.all
4. Retrieve one instance by id 
    a. example: post = Post.find(1)
5. Once you set a variable equal to one instance in the database then you can print out that instances fields
    a. example: post.title 
        "First Post"
6. You can update an instances fields
    a. example: post.update_attribute(:title, "this is the updated title")

Displaying information from Database 
1. In the post controller we set up our index method and our show method
2. You use instance variables and query models to query the database
3. index uses Model.all to find all of the instances in the database
4. show uses Model.find(params[:id]) to find an instance by id number
5. For the all posts page we loop through the instance variable with the .each method 
and display it on the index view
6. For the single post view we simply access the returned object values in the show view
7. See posts_controller.rb, index.html.erb, and show.html.erb

Creating the add new post functionality and the new post interface
1. In the new method set post instance variable equal to Model.new
2. For the drop down variable set the instance variable equal to Model.all
3. In the create method example
    def create
        @post = Post.new(post_params)
        if @post.save
            redirect_to posts_path, :notice => "Your post has been saved"
        else
            render "new"
        end

    end

    def post_params
        params.require(:post).permit(:title, :body, :category_id)
    end
4. See new.html.erb to see how a form is set up
5. Go to application.html.erb to see how flash messages are set up
    
